/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vivek.calculator;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.math.BigDecimal;
import java.math.RoundingMode;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
/**
 *
 * @author user
 */
public class Calculator extends javax.swing.JFrame {

    /**
     * Creates new form Calculator
     */
    
    public Calculator() {
        initComponents();
        this.addWindowListener(new WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent e) {
                exit(); 
                //To change body of generated methods, choose Tools | Templates.
            }    
        });
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        screen = new javax.swing.JTextField();
        reset = new javax.swing.JButton();
        division = new javax.swing.JButton();
        eight = new javax.swing.JButton();
        seven = new javax.swing.JButton();
        multiply = new javax.swing.JButton();
        nine = new javax.swing.JButton();
        four = new javax.swing.JButton();
        five = new javax.swing.JButton();
        six = new javax.swing.JButton();
        subtract = new javax.swing.JButton();
        one = new javax.swing.JButton();
        two = new javax.swing.JButton();
        three = new javax.swing.JButton();
        add = new javax.swing.JButton();
        dott = new javax.swing.JButton();
        zero = new javax.swing.JButton();
        equals = new javax.swing.JButton();
        reset1 = new javax.swing.JButton();
        screen1 = new javax.swing.JTextField();
        screencount = new javax.swing.JButton();
        enablecalc = new javax.swing.JRadioButton();
        disablecalc = new javax.swing.JRadioButton();
        exitt = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Calculator");
        setLocation(new java.awt.Point(500, 170));
        setSize(new java.awt.Dimension(375, 475));
        setType(java.awt.Window.Type.UTILITY);

        jPanel1.setBackground(new java.awt.Color(255, 255, 153));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(1, 1, 1), 3, true));
        jPanel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jPanel1.setMinimumSize(new java.awt.Dimension(420, 475));
        jPanel1.setPreferredSize(new java.awt.Dimension(410, 460));
        jPanel1.setVerifyInputWhenFocusTarget(false);

        screen.setEditable(false);
        screen.setBackground(new java.awt.Color(0, 0, 0));
        screen.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        screen.setForeground(new java.awt.Color(255, 153, 153));
        screen.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        screen.setText("0");
        screen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                screenFocusGained(evt);
            }
        });

        reset.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        division.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        division.setText("/");
        division.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divisionActionPerformed(evt);
            }
        });

        eight.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        eight.setText("8");
        eight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightActionPerformed(evt);
            }
        });

        seven.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        seven.setText("7");
        seven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenActionPerformed(evt);
            }
        });

        multiply.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        multiply.setText("x");
        multiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplyActionPerformed(evt);
            }
        });

        nine.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        nine.setText("9");
        nine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineActionPerformed(evt);
            }
        });

        four.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        four.setText("4");
        four.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourActionPerformed(evt);
            }
        });

        five.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        five.setText("5");
        five.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveActionPerformed(evt);
            }
        });

        six.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        six.setText("6");
        six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixActionPerformed(evt);
            }
        });

        subtract.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        subtract.setText("-");
        subtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtractActionPerformed(evt);
            }
        });

        one.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        one.setText("1");
        one.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneActionPerformed(evt);
            }
        });

        two.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        two.setText("2");
        two.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoActionPerformed(evt);
            }
        });

        three.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        three.setText("3");
        three.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeActionPerformed(evt);
            }
        });

        add.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        add.setText("+");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        dott.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        dott.setText(".");
        dott.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dottActionPerformed(evt);
            }
        });

        zero.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        zero.setText("0");
        zero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroActionPerformed(evt);
            }
        });

        equals.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        equals.setText("=");
        equals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalsActionPerformed(evt);
            }
        });

        reset1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        reset1.setText("DEL");
        reset1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset1ActionPerformed(evt);
            }
        });

        screen1.setBackground(new java.awt.Color(0, 0, 0));
        screen1.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        screen1.setForeground(new java.awt.Color(255, 255, 255));
        screen1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        screen1.setText("0");

        screencount.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        screencount.setText("Count");

        buttonGroup1.add(enablecalc);
        enablecalc.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        enablecalc.setText("ON");
        enablecalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enablecalcActionPerformed(evt);
            }
        });

        buttonGroup1.add(disablecalc);
        disablecalc.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        disablecalc.setText("OFF");
        disablecalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disablecalcActionPerformed(evt);
            }
        });

        exitt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        exitt.setText("EXIT");
        exitt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exittActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(subtract, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(14, 14, 14)
                                        .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(disablecalc, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(enablecalc, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(reset1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(division, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(multiply, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 1, Short.MAX_VALUE))
                                    .addComponent(exitt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(screencount)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(screen1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(screen, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dott, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(zero, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(equals, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(screen, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(screen1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(screencount))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitt, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enablecalc, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(disablecalc, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reset)
                    .addComponent(reset1)
                    .addComponent(division))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(multiply, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subtract, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dott, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(zero, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(equals, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void zeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroActionPerformed
        zero0();
    }//GEN-LAST:event_zeroActionPerformed

    private void dottActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dottActionPerformed
        // TODO add your handling code here:
        dott();
    }//GEN-LAST:event_dottActionPerformed

    private void oneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneActionPerformed
        one1();
    }//GEN-LAST:event_oneActionPerformed

    private void twoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoActionPerformed
        two2();
        
    }//GEN-LAST:event_twoActionPerformed

    private void threeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeActionPerformed
        // TODO add your handling code here:
        three3();
    }//GEN-LAST:event_threeActionPerformed

    private void fourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourActionPerformed
        // TODO add your handling code here:
        four4();
    }//GEN-LAST:event_fourActionPerformed

    private void fiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fiveActionPerformed
        // TODO add your handling code here:
        five5();
    }//GEN-LAST:event_fiveActionPerformed

    private void sixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixActionPerformed
        // TODO add your handling code here:
        six6();
    }//GEN-LAST:event_sixActionPerformed

    private void sevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenActionPerformed
        // TODO add your handling code here:
        seven7();
    }//GEN-LAST:event_sevenActionPerformed

    private void eightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightActionPerformed
        eight8();
    }//GEN-LAST:event_eightActionPerformed

    private void nineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nineActionPerformed
        // TODO add your handling code here:
        nine9();
    }//GEN-LAST:event_nineActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        // TODO add your handling code here:
        enable();reset();
    }//GEN-LAST:event_resetActionPerformed

    private void reset1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset1ActionPerformed
        // TODO add your handling code here:
        delete();
    }//GEN-LAST:event_reset1ActionPerformed

    private void screenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_screenFocusGained
        // TODO add your handling code here:
        if(count==0)
            screen.setText("0");
        else if(error==false)
        screen.setText(screen.getText());  
            
    }//GEN-LAST:event_screenFocusGained

    		
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        add();
    }//GEN-LAST:event_addActionPerformed

    private void subtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtractActionPerformed
         subb();
    }//GEN-LAST:event_subtractActionPerformed

    private void multiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplyActionPerformed
        multi();
    }//GEN-LAST:event_multiplyActionPerformed

    private void divisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divisionActionPerformed
        // TODO add your handling code here:
        divi();        
    }//GEN-LAST:event_divisionActionPerformed

    private void equalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalsActionPerformed
        equi();
    }//GEN-LAST:event_equalsActionPerformed

    private void enablecalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enablecalcActionPerformed
        // TODO add your handling code here:
        enable(); reset();
    }//GEN-LAST:event_enablecalcActionPerformed

    private void disablecalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disablecalcActionPerformed
        reset();disable();
    }//GEN-LAST:event_disablecalcActionPerformed

    private void exittActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exittActionPerformed
        exit();
        
    }//GEN-LAST:event_exittActionPerformed
    public void zero0()
    {    
        if(screen.getText().length()<15)
        {
            zerocheck(screen.getText());
           ou=screen.getText();
           if(ou.equals("0")==false)
                                ou=ou+"0";
                                else 
                                ou="0";
    
            screen.setText(ou);
            count++;
        }
        screencount.setText(Integer.toString(count));
    }
    public void dott()
    {
       if(screen.getText().length()<15)
        {
            if(flag==false)
            {
                zerocheck(screen.getText());     
                ou=screen.getText()+"."; 
                        screen.setText(ou);
                        flag=true;
                    }
            count++;
            }
            screencount.setText(Integer.toString(count));
            }
    		public void one1()
		{
                    ou=screen.getText();
			if(screen.getText().length()<15)
			{
				zerocheck(screen.getText());
                                if(ou.equals("0")==false)
                                ou=ou+"1";
                                else 
                                ou="1";
                
            
				screen.setText(ou);
				count++;
			}
			screencount.setText(Integer.toString(count));
		}public void two2()
		{   
                    ou=screen.getText();
			if(screen.getText().length()<15)
			{
				zerocheck(screen.getText());
            
                
                if(ou.equals("0")==false)
                ou=ou+"2";
                 else 
                ou="2";
            
				screen.setText(ou);
				count++;
			}
			screencount.setText(Integer.toString(count));
		}public void three3()
		{   
                    ou=screen.getText();
			if(screen.getText().length()<15)
			{
				zerocheck(screen.getText());
            
                
                    if(ou.equals("0")==false)
                                ou=ou+"3";
                                else 
                                ou="3";
            
				screen.setText(ou);
				count++;
			}
			screencount.setText(Integer.toString(count));
		}
		public void four4()
		{
			if(screen.getText().length()<15)
			{
				zerocheck(screen.getText());
            
                ou=screen.getText();
                if(ou.equals("0")==false)
                                ou=ou+"4";
                                else 
                                ou="4";
            
            
				screen.setText(ou);
				count++;
			}
			screencount.setText(Integer.toString(count));
		}
		public void five5()
		{ou=screen.getText();
			if(screen.getText().length()<15)
			{
				zerocheck(screen.getText());
            
                if(ou.equals("0")==false)
                ou=ou+"5";
                 else 
                ou="5";
            
				screen.setText(ou);
				count++;
			}
			screencount.setText(Integer.toString(count));
		}
		public void six6()
		{
                    ou=screen.getText();
			if(screen.getText().length()<15)
			{
				zerocheck(screen.getText());
            if(ou.equals("0")==false)
                ou=ou+"6";
            else 
                ou="6";
            
				screen.setText(ou);
				count++;
			}
			screencount.setText(Integer.toString(count));
		}
		public void seven7()
		{
			if(screen.getText().length()<15)
			{
				zerocheck(screen.getText());
            
                ou=screen.getText();
                if(ou.equals("0")==false)
                                ou=ou+"7";
                                else 
                                ou="7";
            
            
				screen.setText(ou);
				count++;
			}
			screencount.setText(Integer.toString(count));
		}
		public void eight8()
		{
			if(screen.getText().length()<15)
			{
				zerocheck(screen.getText());
            
                ou=screen.getText();
                if(ou.equals("0")==false)
                                ou=ou+"8";
                                else 
                                ou="8";
            
            
				screen.setText(ou);
				count++;
			}
			screencount.setText(Integer.toString(count));
		}
		public void nine9()
		{
			if(screen.getText().length()<15)
			{
				zerocheck(screen.getText());
            
                ou=screen.getText();
                if(ou.equals("0")==false)
                                ou=ou+"9";
                                else 
                                ou="9";
            
            
				screen.setText(ou);
				count++;
			}
			screencount.setText(Integer.toString(count));
		}
    public void delete()
    {
        ou=screen.getText();
        if(ou.length()==0) return;
        count+=1;
        
        String l=" ";
        if(ou.length()>1)
        {
            if(ou.charAt(ou.length()-1)=='.')
            {
                flag=false;
            }
            for(int i=0;i<ou.length()-1;i++)
            {
                 l=l+ou.charAt(i);
            }
            l=l.trim();
            ou=l;
            
            screen.setText(ou);
        }
        else
        {
            if(ou.charAt(0)=='.')
            {
                flag=false;
            }
            screen.setText("");
        }
        screencount.setText(Integer.toString(count));
    }
    public void reset()
    {
        flag=false;
        error=false;
        screen.setText("0");
        screen1.setText("0");
        bsum=BigDecimal.valueOf(0);
        bsum1=BigDecimal.valueOf(0);
        bsum2=BigDecimal.valueOf(0);
        bsum3=BigDecimal.valueOf(0);
        bsum4=BigDecimal.valueOf(0);
        bfsum=BigDecimal.valueOf(0);
        screencount.setText("count");
        sum=0;
        count=0;
        sum1=0;
        sum2=0;
        z=1;
        sum3=1;
        sum4=0;
        finalsum=0;
        ou="";
        equalsflag=false;
        respond=false;
        enable();
        screen.setText("");
    }
    
    public int grant(String n)
    {
        int l=n.indexOf('.');
        BigDecimal ab=new BigDecimal(n);
        BigDecimal maxi=new BigDecimal("99999999999999999");
        if(n.length()>17)
        {
            if( l==(-1))
            {
                return 0;
            }
            else
             return 2;
        }
        else if(maxi.compareTo(ab)>0)
        {
            return 1;
        } 
        else return 0;
    }
    public void zerocheck(String n)
    {
        if(equalsflag==true)
        {
            
            reset();
            
        }
        
    }
    public void ERROR_memory()
    {
                error=true;
                screen.setText("Limit Exceeded");
                screen1.setText("Reset");
                screencount.setText("ERROR");
                disablekeys();
                disableoperator();
    }
    public void ERROR_syntax()
    {
                error=true;
                screen.setText("Syntax Error");
                screen1.setText("Reset");
                screencount.setText("ERROR");
                disablekeys();
                disableoperator();
    }
    public void enablekeys()
    {
        one.setEnabled(true);
        zero.setEnabled(true);
        two.setEnabled(true);
        three.setEnabled(true);
        four.setEnabled(true);
        five.setEnabled(true);
        six.setEnabled(true);
        seven.setEnabled(true);
        eight.setEnabled(true);
        nine.setEnabled(true);
        dott.setEnabled(true);
    }
    public void enableoperator()
    {
        equals.setEnabled(true);
        add.setEnabled(true);
        subtract.setEnabled(true);
        multiply.setEnabled(true);
        division.setEnabled(true);
        reset1.setEnabled(true);
    }
    public void enable()
    {
        enablecalc.setEnabled(false);
        disablecalc.setEnabled(true);
        screen.setEnabled(true);
        screen1.setEnabled(true);
        screencount.setEnabled(true);
        reset.setEnabled(true);
        
        enablekeys();
        enableoperator();
    }
        
        public void disablekeys()
        {
        one.setEnabled(false);
        zero.setEnabled(false);
        two.setEnabled(false);
        three.setEnabled(false);
        four.setEnabled(false);
        five.setEnabled(false);
        six.setEnabled(false);
        seven.setEnabled(false);
        eight.setEnabled(false);
        nine.setEnabled(false);
        dott.setEnabled(false);
        }
        public void disableoperator()
        {
        equals.setEnabled(false);
        add.setEnabled(false);
        subtract.setEnabled(false);
        multiply.setEnabled(false);
        division.setEnabled(false);
        reset1.setEnabled(false);
        }
        public void disable()
    {
        screen.setEnabled(false);
        enablecalc.setEnabled(true);
        disablecalc.setEnabled(false);
        screen.setEnabled(false);
        screen1.setEnabled(false);
        screencount.setText("count");
        screencount.setEnabled(false);
        reset.setEnabled(false);
        disablekeys();
        disableoperator();
    }
        
        BigDecimal bsum=new BigDecimal("0");
        BigDecimal bsum1=new BigDecimal("0");
        BigDecimal bsum2=new BigDecimal("0");
        BigDecimal bsum3=new BigDecimal("1");
        BigDecimal bsum4=new BigDecimal("0");
        BigDecimal bfsum=new BigDecimal("0");
        
        void add()
    {
		ou=screen.getText();
        k=ou.length();
        if(afterequals==true)
        {
            afterequals=false;
            k=2;
            
        }
        if(count>0 && respond==false)
            respond=true;
        
        if(k==0)
        {
           // z=1;
            return;
        }
        if(k==1)
        {
            if( ou.charAt(0)=='.')
            sum1=0;
            else if( ou.charAt(0)=='-')
            sum1=1;
            else 
            sum1=Double.parseDouble(ou);
        }
        else
        sum1=Double.parseDouble(ou);
        bsum1=BigDecimal.valueOf(sum1);
        switch(z)
        {
            
            case 1:
                //sum=sum+sum1;
				bsum= bsum.add(bsum1);
                break;
            case 2:
                //sum=sum-sum1;
				bsum=bsum.subtract(bsum1);
                break;
            case 3:
                //sum3=sum3*sum1;
				bsum3=bsum3.multiply(bsum1);
				bsum=bsum3;
                //sum=sum3;
                break;
            case 4:
                if(sum1==0)
                {
                    ERROR_syntax();return;
                }
                
                bsum=bsum.divide(bsum1,2, RoundingMode.HALF_DOWN );
                break;
            case 5:
                //sum=finalsum;
                if(equalsflag==false)
                bsum=bfsum;
                else 
                {
                    equalsflag=false;
                    bsum=bsum1;
                }
                z=1;break;
            default: bsum=bsum.add(bsum1);
        }
        z=1;
        flag=false;
        count++;
        bsum3=BigDecimal.valueOf(1);
        ou=bsum.toString();
        scrn=grant(ou);
        if(scrn==1)
        {
            screen1.setText(bsum+"");
            screen.setText("");
            screencount.setText(Integer.toString(count));
        }
        else if(scrn==0)
        {
            ERROR_memory();
            
            
        }
        else
        { 
            ou=ou.substring(0,20);
            bsum=new BigDecimal(ou);
            screen1.setText(bsum+"");
            screen.setText("");
            screencount.setText(Integer.toString(count));
        }
    }

      void subb()
    {
        ou=screen.getText();
          k=ou.length();
          if(k==1 && ou.charAt(0)=='-')return;
          if(afterequals==true)
          {
              afterequals=false;
              k=2;
              
          }
          if(count>0)respond=true;
        
        if(k==0)
        {
            screen.setText("-");respond=true;
	    return;   
        } 
        
        if(k==1)
        {
	   if(ou.charAt(0)=='.')
            	sum1=0;
           else if(ou.charAt(0)=='-')
	 	{
			screen.setText("-");
			return;	
        	}
            else
               sum1=Double.parseDouble(ou);
               
        }
        else
        sum1=Double.parseDouble(ou);
		bsum1=BigDecimal.valueOf(sum1);
        switch(z)
        {
            case 1:
                bsum=bsum.add(bsum1);
                break;
            case 2:
                bsum=bsum.subtract(bsum1);
                break;
            case 3:
                bsum3=bsum3.multiply(bsum1);
                bsum=bsum3;
                break;
            case 4:
                if(sum1==0)
                {
                    ERROR_syntax();return;
                }
                bsum=bsum.divide(bsum1,2, RoundingMode.HALF_DOWN );
                break;
            case 5:
                if(equalsflag==false)
                bsum=bfsum;
                else 
                {
                    equalsflag=false;;
                    bsum=bsum1;
                }
                z=2;break;
            default: bsum=bsum.add(bsum1);
        }
        z=2;
        flag=false;
        bsum3=BigDecimal.valueOf(1);
        count++;
        ou=bsum.toString();
        scrn=grant(ou);
        if(scrn==1)
        {
            screen1.setText(bsum+"");
            screen.setText("");
            screencount.setText(Integer.toString(count));
        }
        else if(scrn==0)
        {
            ERROR_memory();
            
            
        }
        else
        { 
            ou=ou.substring(0,20);
            bsum=new BigDecimal(ou);
            screen1.setText(bsum+"");
            screen.setText("");
            screencount.setText(Integer.toString(count));
        }
    }
      void multi()
      {
        ou=screen.getText();
        k=ou.length();
        if(afterequals==true)
          {
              afterequals=false;
              k=2;
              //z=3;
          }
        if(count>0)respond=true;
        
        if(k==0 )
        {
            if(respond==true)
            z=3;
            else
            return;
            
        }
        if(k==1)
	{
            if(ou.charAt(0)=='.')
            {
                sum1=0;
            }
	      else if(ou.charAt(0)=='-')
            {
	    screen.setText("-");
	    return;
            }
              else 
            sum1=Double.parseDouble(ou);
        }
        else 
        sum1=Double.parseDouble(ou);
        bsum1=BigDecimal.valueOf(sum1);
        switch(z)
        {
            case 1:
                bsum=bsum.add(bsum1);
                break;
            case 2:
                bsum=bsum.subtract(bsum1);
                break;
            case 3:
                bsum3=bsum3.multiply(bsum1);
                bsum=bsum3;
                break;
            case 4:
                if(sum1==0)
                {
                    ERROR_syntax();return;
                }
                
                bsum=bsum.divide(bsum1,2, RoundingMode.HALF_DOWN );
                break;
            case 5:
                if(equalsflag==false)
                bsum=bfsum;
                else 
                {
                    equalsflag=false;;
                    bsum=bsum1;
                }
                z=3;break;
            default: bsum=bsum.add(bsum1);
        }
        z=3;
        bsum3=bsum;
        flag=false;
        count++;
        ou=bsum.toString();
        scrn=grant(ou);
        if(scrn==1)
        {
            screen1.setText(bsum+"");
            screen.setText("");
            screencount.setText(Integer.toString(count));
        }
        else if(scrn==0)
        {
            ERROR_memory();
            
            
        }
        else
        { 
            ou=ou.substring(0,20);
            bsum=new BigDecimal(ou);
            screen1.setText(bsum+"");
            screen.setText("");
            screencount.setText(Integer.toString(count));
        }
  
      }
              
      void divi()
      {
          if(count>0)respond=true;
        ou=screen.getText();
        k=ou.length();
        if(afterequals==true)
          {
              afterequals=false;
              k=2;
              //z=3;
          }
        
        if(k==0 )
        { 
            if(respond==false)
            return;
            else
            z=4;
        }
        if(count==0 )
        {
          return;
          
        }
        if(k==1)
        {
            if(ou.charAt(0)=='.')
            sum1=0;
            if(ou.charAt(0)=='-')
            sum1=-1;
            else
            sum1=Double.parseDouble(ou);   
        }
        else
        sum1=Double.parseDouble(ou);
        bsum1=BigDecimal.valueOf(sum1);
        switch(z)
        {
            case 1:
                bsum=bsum.add(bsum1);
                break;
            case 2:
                bsum=bsum.subtract(bsum1);
                break;
            case 3:
                bsum3=bsum3.multiply(bsum1);
                bsum=bsum3;
                break;
            case 4:
                if(sum1==0)
                {
                    ERROR_syntax();return;
                }
                bsum=bsum.divide(bsum1,2, RoundingMode.HALF_DOWN );
                break;
            case 5:
                if(equalsflag==false)
                bsum=bfsum;
                else 
                {
                    equalsflag=false;
                    bsum=bsum1;
                }
                z=4;break;
            default: bsum=bsum.add(bsum1);
        }
        z=4;
        count++;
        flag=false;
        bsum3=BigDecimal.valueOf(1);
        ou=bsum.toString();
        scrn=grant(ou);
        if(scrn==1)
        {
            screen1.setText(bsum+"");
            screen.setText("");
            screencount.setText(Integer.toString(count));
        }
        else if(scrn==0)
        {
            ERROR_memory();
            
            
        }
        else
        { 
            ou=ou.substring(0,20);
            bsum=new BigDecimal(ou);
            screen1.setText(bsum+"");
            screen.setText("");
            screencount.setText(Integer.toString(count));
        }         
      }
      void equi()
      {
          
          ou=screen.getText();
        if(ou.equals("-")==true)
        {
            ou="-1";           
        }
        sum4=0;
        if((ou.length())==0)
            if(count==0)
            {
                screen.setText("0");
                return;
            }
            else
            sum4=0;
        else if(ou.length()==1)
        {
            if(ou.charAt(0)=='-')
                sum4=-1;
            if(ou.charAt(0)=='.')
                sum4=0;
            else
            sum4=Double.parseDouble(ou);
        }
        else
            sum4=Double.parseDouble(ou);
        
        bsum4=BigDecimal.valueOf(sum4);
        switch(z)
        {
            case 1:
                bfsum=bsum.add(bsum4);
                break;
            case 2:
                bfsum=bsum.subtract(bsum4);
                break;
            case 3:
                bfsum=bsum.multiply(bsum4);
                break;
            case 4:
                if(sum4==0)
                {
                    ERROR_syntax();return;
                }
                
                bfsum=bsum.divide(bsum4,2, RoundingMode.HALF_DOWN );
                break;
            case 5:
                if(equalsflag==false)
                bsum=bfsum;
                else 
                {
                    equalsflag=false;
                    equalsflag=false;
                    equalsflag=false;
                    equalsflag=false;
                    equalsflag=false;
                    bsum=bsum1;
                }
                z=5;break;
            default: bfsum=bsum.add(bsum4);
        }
        bsum3=BigDecimal.valueOf(1);
        bsum=bfsum;
        
        screencount.setText(Integer.toString(count));
        
        afterequals=true;
        z=5;
        
        ou=bsum.toString();
        equalsflag=true;
        scrn=grant(ou);
        if(scrn==1)
        {
            screen1.setText("Reset");
            screen.setText(bsum+"");
            screencount.setText(Integer.toString(count));
        }
        else if(scrn==0)
        {
            ERROR_memory();
            
            
        }
        else
        { 
            ou=ou.substring(0,20);
            bsum=new BigDecimal(ou);
            screen1.setText("Reset");
            screen.setText(bsum+"");
            screencount.setText(Integer.toString(count));
        }
         j=0; 
      }
      
      private JFrame exframe ;
    void exit()
    {
        exframe = new JFrame("EXIT");
        if(JOptionPane.showConfirmDialog(exframe, "Are you Sure you want to exit? ","TIC TAC TOE",
                JOptionPane.YES_NO_OPTION)==JOptionPane.YES_NO_OPTION)
        {
            System.exit(0);
        }
        else 
            return;
    }
      
    public static void main(String args[]) {
        Calculator ob =new Calculator();
        ob.disable();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(() -> {
            ob.setVisible(true);
            
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton disablecalc;
    private javax.swing.JButton division;
    private javax.swing.JButton dott;
    private javax.swing.JButton eight;
    private javax.swing.JRadioButton enablecalc;
    private javax.swing.JButton equals;
    private javax.swing.JButton exitt;
    private javax.swing.JButton five;
    private javax.swing.JButton four;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JButton multiply;
    private javax.swing.JButton nine;
    private javax.swing.JButton one;
    private javax.swing.JButton reset;
    private javax.swing.JButton reset1;
    private javax.swing.JTextField screen;
    private javax.swing.JTextField screen1;
    private javax.swing.JButton screencount;
    private javax.swing.JButton seven;
    private javax.swing.JButton six;
    private javax.swing.JButton subtract;
    private javax.swing.JButton three;
    private javax.swing.JButton two;
    private javax.swing.JButton zero;
    // End of variables declaration//GEN-END:variables
    String ou;double k;int z=1;
    boolean error=false, afterequals=false,flag=false,respond=false;int count=0;
    int j,scrn;
    boolean equalsflag=false;
    double sum=0,sum1=0,sum2=0,sum3=1,sum4=0,finalsum=0;
}
